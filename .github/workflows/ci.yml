name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC

jobs:
  powershell-analysis:
    name: PowerShell Script Analysis
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install PSScriptAnalyzer
      shell: powershell
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
    - name: Run PSScriptAnalyzer
      shell: powershell
      run: |
        $results = Invoke-ScriptAnalyzer -Path "scripts/Invoke-vSphere8CISAudit.ps1" -Severity Error,Warning
        if ($results) {
          $results | Format-Table -AutoSize
          Write-Error "PSScriptAnalyzer found issues"
        } else {
          Write-Host "✅ PSScriptAnalyzer passed - no issues found" -ForegroundColor Green
        }
        
  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        
    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli
      
    - name: Run markdownlint
      run: markdownlint README.md docs/ --config .markdownlint.json || true
      
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  link-checker:
    name: Link Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        
    - name: Install markdown-link-check
      run: npm install -g markdown-link-check
      
    - name: Check links in README
      run: markdown-link-check README.md --config .github/mlc_config.json || true
      
  validate-structure:
    name: Repository Structure Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate repository structure
      run: |
        echo "🔍 Validating repository structure..."
        
        # Check required files
        required_files=(
          "README.md"
          "LICENSE"
          "SECURITY.md"
          "CONTRIBUTING.md"
          "scripts/Invoke-vSphere8CISAudit.ps1"
          ".github/workflows/ci.yml"
          ".github/dependabot.yml"
        )
        
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file is missing"
            exit 1
          fi
        done
        
        # Check directory structure
        required_dirs=(
          "scripts"
          "docs"
          "reports"
          ".github/workflows"
        )
        
        for dir in "${required_dirs[@]}"; do
          if [[ -d "$dir" ]]; then
            echo "✅ Directory $dir exists"
          else
            echo "❌ Directory $dir is missing"
            exit 1
          fi
        done
        
        echo "🎉 Repository structure validation passed!"
        
  test-powershell-syntax:
    name: PowerShell Syntax Validation
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Test PowerShell syntax
      shell: powershell
      run: |
        Write-Host "🔍 Testing PowerShell script syntax..." -ForegroundColor Cyan
        
        try {
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content "scripts/Invoke-vSphere8CISAudit.ps1" -Raw), [ref]$null)
          Write-Host "✅ PowerShell syntax validation passed" -ForegroundColor Green
        }
        catch {
          Write-Error "❌ PowerShell syntax validation failed: $($_.Exception.Message)"
          exit 1
        }
        
  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate script documentation
      run: |
        echo "📚 Generating documentation..."
        
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Generate installation guide
        cat > docs/installation.md << 'EOF'
        # Installation Guide
        
        ## Prerequisites
        
        - Windows PowerShell 5.1 or PowerShell Core 7.0+
        - VMware PowerCLI 13.0 or later
        - Network access to vCenter Server
        - Read-only permissions on vSphere environment
        
        ## Installation Steps
        
        1. **Clone the repository:**
           ```bash
           git clone https://github.com/uldyssian-sh/vmware-vsphere-8-cis-benchmark.git
           cd vmware-vsphere-8-cis-benchmark
           ```
        
        2. **Install VMware PowerCLI:**
           ```powershell
           Install-Module -Name VMware.PowerCLI -Force -AllowClobber -Scope CurrentUser
           ```
        
        3. **Set execution policy:**
           ```powershell
           Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
           ```
        
        4. **Run the audit:**
           ```powershell
           .\scripts\Invoke-vSphere8CISAudit.ps1
           ```
        
        ## Troubleshooting
        
        - Ensure PowerCLI modules are properly installed
        - Verify network connectivity to vCenter Server
        - Check user permissions for read-only access
        EOF
        
        echo "✅ Documentation generated successfully"
        
    - name: Commit documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/
        git diff --staged --quiet || git commit -m "📚 Auto-update documentation [skip ci]"
        git push || true